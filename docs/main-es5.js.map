{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/footer/footer.component.ts","webpack:///src/app/components/footer/footer.component.html","webpack:///src/app/components/header/header.component.ts","webpack:///src/app/components/header/header.component.html","webpack:///src/app/components/moving-sentence-block/moving-sentence-block.component.ts","webpack:///src/app/components/moving-sentence-block/moving-sentence-block.component.html","webpack:///src/app/counting-words/lib/counting-words.ts","webpack:///src/app/directives/factory-host.directive.ts","webpack:///src/app/pages/game/game.component.ts","webpack:///src/app/pages/game/game.component.html","webpack:///src/app/pages/homepage/homepage.component.ts","webpack:///src/app/pages/homepage/homepage.component.html","webpack:///src/app/pages/words-form/analysis-report-table/analysis-report-table.component.ts","webpack:///src/app/pages/words-form/analysis-report-table/analysis-report-table.component.html","webpack:///src/app/pages/words-form/words-form.component.ts","webpack:///src/app/pages/words-form/words-form.component.html","webpack:///src/app/services/routing.service.ts","webpack:///src/app/services/sentence.service.ts","webpack:///src/app/utils/sentence-dictionary.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","routingService","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","FooterComponent","HeaderComponent","MovingSentenceBlockComponent","sentenceClicked","startMoving","randomNumber","Math","floor","random","toString","position","setTimeout","timeToFall","value","data","emit","clearTimeout","onSentenceClicked","WordFrequency","word","frequency","WordFrequencyAnalyzer","text","toLowerCase","listOfWords","wordRegex","words","match","forEach","wordText","alreadyExistingWord","find","getWord","incrementFrequency","push","highestFrequency","getAllWordsFromText","getFrequency","wordInList","n","sort","a","b","localeCompare","slice","FactoryHostDirective","viewContainerRef","SentenceItem","GameComponent","sentenceService","componentFactoryResolver","wordAnalyzer","lastScore","wordObjective","gameInProgress","score","timeDurationS","getRandomSentence","sentence","newComponent","componentFactory","resolveComponentFactory","factoryHost","componentRef","createComponent","instance","pipe","subscribe","destroy","gameLengthMs","getRandomWord","gameDurationTimer","setInterval","spawnSentenceInterval","createSentence","isWordObjectiveTheMostUsed","mostFrequentThreeWords","calculateMostFrequentNWords","item","endGameTimer","endGame","clear","clearInterval","clearBoard","startGame","HomepageComponent","AnalysisReportTableComponent","list","WordsFormComponent","reportUnorderedList","frequencyForWord","mostFrequentNWords","textForm","textContent","required","mostFrequentNWordAmount","status","calculateHighestFrequency","calculateFrequencyForWord","getUnorderedList","getHighestFrequency","getFrequencyForWord","getMostFrequentNWords","controls","control","invalid","dirty","touched","setValue","onFormSubmit","generateSentence","RoutingService","router","otherFunction","events","event","console","log","providedIn","SentenceService","getKeys","Object","map","Number","maxKey","max","hasOwnProperty","maxSentenceLength","sentenceLength","i","charAt","toUpperCase","EXAMPLE_SENTENCES_MAP","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { GameComponent } from \"./pages/game/game.component\";\r\nimport { HomepageComponent } from \"./pages/homepage/homepage.component\";\r\nimport { WordsFormComponent } from \"./pages/words-form/words-form.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: HomepageComponent,\r\n  },\r\n  {\r\n    path: \"form\",\r\n    component: WordsFormComponent,\r\n  },\r\n  {\r\n    path: \"game\",\r\n    component: GameComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { Component } from '@angular/core';\r\nimport { RoutingService } from './services/routing.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'counting-words';\r\n\r\n  constructor(routingService: RoutingService) { }\r\n\r\n}\r\n","<div class=\"page-wrap\">\r\n  <app-header></app-header>\r\n\r\n  <main class=\"content\">\r\n    <div class=\"content-container\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </main>\r\n\r\n  <app-footer></app-footer>\r\n</div>\r\n","import { BrowserModule } from \"@angular/platform-browser\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { AppRoutingModule } from \"./app-routing.module\";\r\nimport { AppComponent } from \"./app.component\";\r\nimport { HomepageComponent } from \"./pages/homepage/homepage.component\";\r\nimport { HeaderComponent } from \"./components/header/header.component\";\r\nimport { FooterComponent } from \"./components/footer/footer.component\";\r\nimport { WordsFormComponent } from \"./pages/words-form/words-form.component\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { GameComponent } from \"./pages/game/game.component\";\r\nimport { MovingSentenceBlockComponent } from \"./components/moving-sentence-block/moving-sentence-block.component\";\r\nimport { FactoryHostDirective } from \"./directives/factory-host.directive\";\r\nimport { AnalysisReportTableComponent } from \"./pages/words-form/analysis-report-table/analysis-report-table.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomepageComponent,\r\n    HeaderComponent,\r\n    FooterComponent,\r\n    WordsFormComponent,\r\n    GameComponent,\r\n    MovingSentenceBlockComponent,\r\n    FactoryHostDirective,\r\n    AnalysisReportTableComponent,\r\n  ],\r\n  imports: [BrowserModule, AppRoutingModule, FormsModule, ReactiveFormsModule],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"footer\">\r\n  <div class=\"copyright\">&copy; Harald Hiemstra 2021</div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<header>\r\n  <a routerLink=\"\">\r\n    <img\r\n      src=\"assets/counting_words.png\"\r\n      height=\"150px\"\r\n      alt=\"Counting Words Logo\"\r\n    />\r\n  </a>\r\n</header>\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"app-moving-sentence-block\",\r\n  templateUrl: \"./moving-sentence-block.component.html\",\r\n  styleUrls: [\"./moving-sentence-block.component.scss\"],\r\n})\r\nexport class MovingSentenceBlockComponent implements OnInit, OnDestroy {\r\n  @Input() data: any;\r\n\r\n  @Output() sentenceClicked: EventEmitter<any> = new EventEmitter();\r\n\r\n  startMoving: boolean = false;\r\n  position: string;\r\n  timeToFall: any;\r\n\r\n  constructor() {\r\n    // number between 10 and 90 for x-axis location\r\n    const randomNumber: string = Math.floor(Math.random() * 80 + 10).toString();\r\n    this.position = randomNumber + \"%\";\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    setTimeout(() => {\r\n      this.startMoving = true;\r\n    }, 50);\r\n\r\n    this.timeToFall = setTimeout(() => {\r\n      // if the word has a positive score value, give minus points when it falls.\r\n      const value = this.data.value > 0 ? -this.data.value : 0;\r\n      this.sentenceClicked.emit(value);\r\n    }, 10050);\r\n  }\r\n\r\n  onSentenceClicked() {\r\n    this.sentenceClicked.emit(this.data.value);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    clearTimeout(this.timeToFall);\r\n  }\r\n}\r\n","<div\r\n  class=\"sentence-block\"\r\n  (click)=\"onSentenceClicked()\"\r\n  [class.destination]=\"startMoving\"\r\n  [ngStyle]=\"{ right: position }\"\r\n>\r\n  <p>{{ data.sentence }}</p>\r\n</div>\r\n","import {\r\n  IWordFrequency,\r\n  IWordFrequencyAnalyzer,\r\n} from \"./counting-words.interface\";\r\n\r\nexport class WordFrequency implements IWordFrequency {\r\n  private word: string;\r\n\r\n  private frequency: number = 1;\r\n\r\n  constructor(word: string) {\r\n    this.word = word;\r\n  }\r\n\r\n  getWord(): string {\r\n    return this.word;\r\n  }\r\n\r\n  getFrequency(): number {\r\n    return this.frequency;\r\n  }\r\n\r\n  incrementFrequency(): void {\r\n    this.frequency++;\r\n  }\r\n}\r\n\r\nexport class WordFrequencyAnalyzer implements IWordFrequencyAnalyzer {\r\n  constructor() {}\r\n\r\n  /* Exctracts all words from the input text and returns it in an unsorted array of WordFrequency objects. */\r\n  getAllWordsFromText(text: string): WordFrequency[] {\r\n    text = text.toLowerCase();\r\n    const listOfWords: WordFrequency[] = [];\r\n\r\n    const wordRegex = /([A-Za-z])\\w*/g;\r\n    const words = text.match(wordRegex);\r\n\r\n    words?.forEach((wordText) => {\r\n      const alreadyExistingWord = listOfWords.find(\r\n        (e) => e.getWord() === wordText\r\n      );\r\n      if (alreadyExistingWord) {\r\n        alreadyExistingWord.incrementFrequency();\r\n      } else {\r\n        listOfWords.push(new WordFrequency(wordText));\r\n      }\r\n    });\r\n\r\n    return listOfWords;\r\n  }\r\n\r\n  /* Returns the highest frequency a word appears in the text. */\r\n  calculateHighestFrequency(text: string): number {\r\n    let highestFrequency: number = 0;\r\n\r\n    const listOfWords: WordFrequency[] = this.getAllWordsFromText(text);\r\n\r\n    listOfWords?.forEach((word: WordFrequency) => {\r\n      const frequency = word.getFrequency();\r\n      if (frequency > highestFrequency) {\r\n        highestFrequency = frequency;\r\n      }\r\n    });\r\n    return highestFrequency;\r\n  }\r\n\r\n  /* Return the frequency the specific word appears in the text. */\r\n  calculateFrequencyForWord(text: string, word: string): number {\r\n    const listOfWords: WordFrequency[] = this.getAllWordsFromText(text);\r\n\r\n    const wordInList = listOfWords.find((e) => e.getWord() === word);\r\n\r\n    return wordInList?.getFrequency() || 0;\r\n  }\r\n\r\n  /* Returns the N most frequent words in an sorted array of WordFrequency objects */\r\n  calculateMostFrequentNWords(text: string, n: number): WordFrequency[] {\r\n    const listOfWords: WordFrequency[] = this.getAllWordsFromText(text);\r\n    listOfWords.sort((a, b) => {\r\n      return a.getFrequency() === b.getFrequency()\r\n        ? a.getWord().localeCompare(b.getWord())\r\n        : b.getFrequency() - a.getFrequency();\r\n    });\r\n\r\n    return listOfWords.slice(0, n);\r\n  }\r\n}\r\n\r\nexport default WordFrequencyAnalyzer;\r\n","// tslint:disable: directive-selector\r\nimport { Directive, ViewContainerRef } from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: \"[factoryHost]\",\r\n})\r\nexport class FactoryHostDirective {\r\n  constructor(public viewContainerRef: ViewContainerRef) {}\r\n}\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/\r\n","import {\r\n  Component,\r\n  ComponentFactoryResolver,\r\n  Type,\r\n  ViewChild,\r\n} from \"@angular/core\";\r\nimport { MovingSentenceBlockComponent } from \"src/app/components/moving-sentence-block/moving-sentence-block.component\";\r\nimport WordFrequencyAnalyzer, {\r\n  WordFrequency,\r\n} from \"src/app/counting-words/lib/counting-words\";\r\nimport { FactoryHostDirective } from \"src/app/directives/factory-host.directive\";\r\nimport { SentenceService } from \"src/app/services/sentence.service\";\r\nimport { take } from \"rxjs/operators\";\r\n\r\nexport interface SentenceComponent {\r\n  data: any;\r\n  sentenceClicked: any;\r\n}\r\n\r\nexport class SentenceItem {\r\n  constructor(public component: Type<any>, public data: any) {}\r\n}\r\n\r\n@Component({\r\n  selector: \"app-game\",\r\n  templateUrl: \"./game.component.html\",\r\n  styleUrls: [\"./game.component.scss\"],\r\n})\r\nexport class GameComponent {\r\n  words: WordFrequency[] = [];\r\n  wordAnalyzer: WordFrequencyAnalyzer = new WordFrequencyAnalyzer();\r\n\r\n  lastScore: number = 0;\r\n  wordObjective: string = \"\";\r\n  gameInProgress: boolean = false;\r\n  score: number = 0;\r\n  timeDurationS: number = 0;\r\n\r\n  gameDurationTimer: any;\r\n  spawnSentenceInterval: any;\r\n  endGameTimer: any;\r\n\r\n  @ViewChild(FactoryHostDirective, { static: true })\r\n  factoryHost!: FactoryHostDirective;\r\n\r\n  constructor(\r\n    private sentenceService: SentenceService,\r\n    private componentFactoryResolver: ComponentFactoryResolver\r\n  ) {}\r\n\r\n  createSentence(): string {\r\n    return this.sentenceService.getRandomSentence(15);\r\n  }\r\n\r\n  /* Creates a new falling sentence block */\r\n  createComponent(sentence: string = \"\", value: number = 0) {\r\n    const newComponent = new SentenceItem(MovingSentenceBlockComponent, {\r\n      sentence,\r\n      value,\r\n    });\r\n\r\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(\r\n      newComponent.component\r\n    );\r\n    const viewContainerRef = this.factoryHost.viewContainerRef;\r\n    const componentRef = viewContainerRef.createComponent<SentenceComponent>(\r\n      componentFactory\r\n    );\r\n\r\n    // give the compnent a sentence and it's score\r\n    componentRef.instance.data = newComponent.data;\r\n    componentRef.instance.sentenceClicked\r\n      .pipe(take(1))\r\n      .subscribe((value: any) => {\r\n        // destroy the clicked sentence component, edit score and complete this Subscription via take(1)\r\n        this.score += value;\r\n        componentRef.destroy();\r\n      });\r\n  }\r\n\r\n  startGame(gameLengthMs: number = 30000) {\r\n    this.wordObjective = this.sentenceService.getRandomWord();\r\n\r\n    this.gameInProgress = true;\r\n    this.score = 0;\r\n    this.timeDurationS = gameLengthMs / 1000;\r\n\r\n    this.gameDurationTimer = setInterval(() => {\r\n      this.timeDurationS = this.timeDurationS - 1;\r\n    }, 1000);\r\n\r\n    this.spawnSentenceInterval = setInterval(() => {\r\n      const sentence = this.createSentence();\r\n\r\n      /* check if on of the 3 most frequent words is the objective.\r\n       If the objective word is in the top 3, give a positive score if cought.*/\r\n      let isWordObjectiveTheMostUsed: boolean = false;\r\n      const mostFrequentThreeWords = this.wordAnalyzer.calculateMostFrequentNWords(\r\n        sentence,\r\n        3\r\n      );\r\n\r\n      mostFrequentThreeWords.forEach((item) => {\r\n        if (this.wordObjective === item.getWord()) {\r\n          isWordObjectiveTheMostUsed = true;\r\n        }\r\n      });\r\n\r\n      const value: number = isWordObjectiveTheMostUsed ? 1 : -1;\r\n\r\n      this.createComponent(sentence, value);\r\n    }, 900);\r\n\r\n    this.endGameTimer = setTimeout(() => {\r\n      this.endGame();\r\n    }, gameLengthMs);\r\n  }\r\n\r\n  clearBoard() {\r\n    const viewContainerRef = this.factoryHost.viewContainerRef;\r\n    viewContainerRef.clear();\r\n  }\r\n\r\n  endGame() {\r\n    this.lastScore = this.score;\r\n    clearInterval(this.gameDurationTimer);\r\n    clearInterval(this.spawnSentenceInterval);\r\n    clearTimeout(this.endGameTimer);\r\n    this.clearBoard();\r\n    this.score = 0;\r\n    this.gameInProgress = false;\r\n  }\r\n}\r\n","<div class=\"gameboard\" [class.gameInProgress]=\"gameInProgress\">\r\n  <div class=\"game-form\">\r\n    <a routerLink=\"\">Back to homepage</a>\r\n    <h1>Catching words game</h1>\r\n    <p>\r\n      The objective is to click all falling sentences containing specific words\r\n      before they end the bottom of the page. The sentence must have the\r\n      objective word as the most frequent occurring word in it.\r\n    </p>\r\n    <p>\r\n      If the sentence has two words tied for most occurring, only the one that's\r\n      first in alphabetic order, will be counting.\r\n    </p>\r\n    <p>If you click the wrong sentence, you will get minus points.</p>\r\n    <br />\r\n    <div class=\"column-division\">\r\n      <div class=\"form\">\r\n        <button type=\"button\" (click)=\"startGame()\">Start Game</button>\r\n        <button type=\"button\" (click)=\"endGame()\">End Game</button>\r\n      </div>\r\n\r\n      <div class=\"scoreboard\">\r\n        <p *ngIf=\"lastScore\">\r\n          Your last score was : <b>{{ lastScore }}</b>\r\n        </p>\r\n\r\n        <p *ngIf=\"wordObjective\">\r\n          Objective: Click all words that contain the word\r\n          <b> \"{{ wordObjective }}\" as one of the 3 most occurring words.\"</b>\r\n        </p>\r\n        <p>\r\n          Time Remaining : <b>{{ timeDurationS }}</b> seconds\r\n        </p>\r\n        <div>score = {{ score }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <br />\r\n  <ng-template factoryHost></ng-template>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-homepage',\r\n  templateUrl: './homepage.component.html',\r\n  styleUrls: ['./homepage.component.scss']\r\n})\r\nexport class HomepageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<h1>Homepage</h1>\r\n<div class=\"homepage-container\">\r\n  <a routerLink=\"form\">\r\n    <img src=\"assets/boring.jpg\" width=\"100%\" alt=\"\" />\r\n  </a>\r\n  <a routerLink=\"game\">\r\n    <img src=\"assets/game.jpg\" width=\"100%\" alt=\"\" />\r\n  </a>\r\n</div>\r\n","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { WordFrequency } from \"src/app/counting-words/lib/counting-words\";\r\n\r\n@Component({\r\n  selector: \"app-analysis-report-table\",\r\n  templateUrl: \"./analysis-report-table.component.html\",\r\n  styleUrls: [\"./analysis-report-table.component.scss\"],\r\n})\r\nexport class AnalysisReportTableComponent implements OnInit {\r\n  @Input() list: WordFrequency[] = [];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","<table class=\"analysis-report-table\">\r\n  <th>Word</th>\r\n  <th>Frequency</th>\r\n  <tr *ngFor=\"let item of list\">\r\n    <td>{{ item.getWord() }}</td>\r\n    <td>{{ item.getFrequency() }}</td>\r\n  </tr>\r\n</table>\r\n","import { Component } from \"@angular/core\";\r\nimport {\r\n  AbstractControl,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from \"@angular/forms\";\r\nimport WordFrequencyAnalyzer, {\r\n  WordFrequency,\r\n} from \"../../counting-words/lib/counting-words\";\r\nimport { SentenceService } from \"../../services/sentence.service\";\r\n\r\n@Component({\r\n  selector: \"app-words-form\",\r\n  templateUrl: \"./words-form.component.html\",\r\n  styleUrls: [\"./words-form.component.scss\"],\r\n})\r\nexport class WordsFormComponent {\r\n  textForm: FormGroup;\r\n  wordAnalyzer: WordFrequencyAnalyzer = new WordFrequencyAnalyzer();\r\n\r\n  reportUnorderedList: WordFrequency[] = [];\r\n  highestFrequency: number = 0;\r\n  frequencyForWord: number = 0;\r\n  mostFrequentNWords: WordFrequency[] = [];\r\n\r\n  constructor(private sentenceService: SentenceService) {\r\n    this.textForm = new FormGroup({\r\n      textContent: new FormControl(\"\", [Validators.required]),\r\n      word: new FormControl(\"\"),\r\n      mostFrequentNWordAmount: new FormControl(\"\"),\r\n    });\r\n  }\r\n\r\n  getUnorderedList() {\r\n    if (this.textContent.status === \"VALID\") {\r\n      this.reportUnorderedList = this.wordAnalyzer.getAllWordsFromText(\r\n        this.textContent.value\r\n      );\r\n    }\r\n  }\r\n\r\n  getHighestFrequency() {\r\n    if (this.textContent.status === \"VALID\") {\r\n      this.highestFrequency = this.wordAnalyzer.calculateHighestFrequency(\r\n        this.textContent.value\r\n      );\r\n    }\r\n  }\r\n\r\n  getFrequencyForWord() {\r\n    if (this.textContent.status === \"VALID\") {\r\n      this.frequencyForWord = this.wordAnalyzer.calculateFrequencyForWord(\r\n        this.textContent.value,\r\n        this.word.value\r\n      );\r\n    }\r\n  }\r\n\r\n  getMostFrequentNWords() {\r\n    if (this.textContent.status === \"VALID\") {\r\n      this.mostFrequentNWords = this.wordAnalyzer.calculateMostFrequentNWords(\r\n        this.textContent.value,\r\n        this.mostFrequentNWordAmount.value\r\n      );\r\n    }\r\n  }\r\n\r\n  onFormSubmit() {\r\n    if (this.textContent.status === \"VALID\") {\r\n      this.getUnorderedList();\r\n      this.getHighestFrequency();\r\n      this.getFrequencyForWord();\r\n      this.getMostFrequentNWords();\r\n    }\r\n  }\r\n\r\n  get textContent(): AbstractControl {\r\n    return this.textForm.controls.textContent;\r\n  }\r\n\r\n  get word(): AbstractControl {\r\n    return this.textForm.controls.word;\r\n  }\r\n\r\n  get mostFrequentNWordAmount(): AbstractControl {\r\n    return this.textForm.controls.mostFrequentNWordAmount;\r\n  }\r\n\r\n  hasError(control: AbstractControl): boolean {\r\n    return control.invalid && (control.dirty || control.touched);\r\n  }\r\n\r\n  generateSentence() {\r\n    const sentence = this.sentenceService.getRandomSentence();\r\n    this.textContent.setValue(sentence);\r\n  }\r\n}\r\n","<a routerLink=\"\">Back</a>\r\n\r\n<form class=\"word-form\" [formGroup]=\"textForm\" (ngSubmit)=\"onFormSubmit()\">\r\n  <h1>Word Form</h1>\r\n  <p>\r\n    <i>\r\n      Here you can analyse a text by pasting the text inside the textbox. There\r\n      are several options to choose to generate different analysis reports.\r\n    </i>\r\n  </p>\r\n\r\n  <div class=\"form-section\">\r\n    <label class=\"textContent\">\r\n      Type of paste the text you want to analyze here: *\r\n      <textarea formControlName=\"textContent\" rows=\"4\" cols=\"50\"> </textarea>\r\n      <span *ngIf=\"hasError(textContent)\">This field is mandatory</span>\r\n    </label>\r\n    <button type=\"button\" (click)=\"generateSentence()\">\r\n      Generate random sentence\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"form-section\">\r\n    <label>\r\n      Fill in the word you want to receive the frequency of.\r\n      <input type=\"text\" formControlName=\"word\" placeholder=\"lake\" />\r\n    </label>\r\n  </div>\r\n\r\n  <div class=\"form-section\">\r\n    <label>\r\n      How many of the most frequent words would you like to see?\r\n      <input\r\n        type=\"number\"\r\n        formControlName=\"mostFrequentNWordAmount\"\r\n        placeholder=\"5\"\r\n      />\r\n    </label>\r\n  </div>\r\n\r\n  <div class=\"form-section\">\r\n    <button type=\"submit\">Complete analysis</button>\r\n  </div>\r\n</form>\r\n\r\n<br />\r\n\r\n<ng-container *ngIf=\"highestFrequency\">\r\n  <h1>Analysis</h1>\r\n  <i>Based on the supplied text and filled in fields these are the results:</i>\r\n\r\n  <br />\r\n\r\n  <p *ngIf=\"highestFrequency\">\r\n    The highest frequency in the text is {{ highestFrequency }}.\r\n  </p>\r\n\r\n  <p *ngIf=\"frequencyForWord\">\r\n    Furthermore, the word \"{{ word.value }}\" is used\r\n    {{ frequencyForWord }} times.\r\n  </p>\r\n\r\n  <br />\r\n\r\n  <p *ngIf=\"this.mostFrequentNWords.length\">\r\n    This table shows the {{ mostFrequentNWordAmount.value }} most frequent words\r\n    in the text.\r\n  </p>\r\n  <app-analysis-report-table\r\n    *ngIf=\"this.mostFrequentNWords.length\"\r\n    [list]=\"this.mostFrequentNWords\"\r\n  ></app-analysis-report-table>\r\n</ng-container>\r\n","import { Injectable } from '@angular/core';\nimport { filter } from 'rxjs/operators';\n\nimport { Event, RouterEvent, Router, NavigationEnd } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoutingService {\n\n  constructor(private router: Router) {\n    this.otherFunction();\n\n    this.router.events.pipe(\n      filter(event => event instanceof NavigationEnd)).subscribe(\n        (event: any) => {\n          console.log(event);\n        });\n\n\n  }\n\n  otherFunction() {\n    console.log('routingService constructor');\n\n  }\n}\n","import { Injectable } from \"@angular/core\";\r\n\r\nimport { EXAMPLE_SENTENCES_MAP } from \"../utils/sentence-dictionary\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class SentenceService {\r\n  constructor() { }\r\n\r\n  getRandomWord(): string {\r\n    const getKeys: number[] = Object.keys(EXAMPLE_SENTENCES_MAP).map(Number);\r\n    const maxKey = Math.max(...getKeys);\r\n    const randomNumber: number = Math.floor(Math.random() * (maxKey + 1));\r\n\r\n    return EXAMPLE_SENTENCES_MAP.hasOwnProperty(randomNumber)\r\n      ? EXAMPLE_SENTENCES_MAP[randomNumber]\r\n      : \"\";\r\n  }\r\n\r\n  getRandomSentence(maxSentenceLength: number = 100): string {\r\n    let sentence: string = \"\";\r\n\r\n    const sentenceLength: number =\r\n      Math.floor(Math.random() * maxSentenceLength) + 1;\r\n\r\n    for (let i = 0; i < sentenceLength; i++) {\r\n      const word = this.getRandomWord();\r\n      if (i === 0) {\r\n        sentence += word.charAt(0).toUpperCase() + word.slice(1);\r\n      } else if (i === sentenceLength - 1) {\r\n        sentence += \".\";\r\n      } else if (i < sentenceLength) {\r\n        sentence += \" \" + word;\r\n      }\r\n    }\r\n\r\n    return sentence;\r\n  }\r\n}\r\n","export const EXAMPLE_SENTENCES_MAP: { [key: number]: string } = {\r\n  0: \"I\",\r\n  1: \"do\",\r\n  2: \"me\",\r\n  3: \"lake\",\r\n  4: \"lorem\",\r\n  5: \"sentence\",\r\n  6: \"random\",\r\n};\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}